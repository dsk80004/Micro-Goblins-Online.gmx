<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>laggy_objects_priority = ds_priority_create()
skipped_steps = room_speed/13
to_much_lag_this_frame = false
enough_lag_this_frame = false
ideal_fps = 60

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///delete lag machines from the world

//find the highest count
var obj_index = ds_priority_find_max(laggy_objects_priority)
if (obj_index != undefined){
  var count = ds_priority_find_priority(laggy_objects_priority, obj_index)
  
  //now remove it
  var forget = ds_priority_delete_max(laggy_objects_priority);

  //find the percent of objects which need to be deleted to deal with the lag
  //this is only an estimate, so we only do a fraction of the estimate, the next frame can clean up the rest.
  var latancy = 1*lag()
  
  //show_debug_message("latancy = "+string(latancy))
  //show_debug_message("skipped_steps = "+string(skipped_steps))
  
  if (latancy &gt; skipped_steps){
    var percent = (1 - (skipped_steps/latancy)) * 0.33
  }else{
    var percent = 0.165
  }
  
  
  //show_debug_message(string(floor(count*percent)))
  //show_debug_message(string(count))
  //now delete 10% of all those objects in descriminately
  // "oof them daddy" -Red
  repeat(floor(count*percent)){
    var obj = instance_find(obj_index, 0);
    if (obj != noone){
      //show_debug_message("destroyed an object")
      instance_destroy(obj)
    }else{
      //show_debug_message("no object exists")
      //break;
    }
  }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>_fps_time = get_timer()
to_much_lag_this_frame = false
enough_lag_this_frame = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
