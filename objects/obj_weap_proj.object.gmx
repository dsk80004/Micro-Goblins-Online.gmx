<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dis_traveled = 0
do_not_collide = false
collide_ground = false
collide_enemy  = false
collide_solid  = false

w_range = 16*10
self.collide = false
self.pre_collide = false

self.active_queue = -1
self.weapon_event_queues = -1

self.step_event_queues = -1
self.step_event_queues_temp = -1

self.pre_col_queues = -1
self.pre_col_queues_temp = -1

self.constant_timer = 0


previous_locations_steps = room_speed/10
previous_locations_step = 0
previous_locations_i = 0

//previous_locations_array[0, 0] = x
//previous_locations_array[0, 1] = y

previous_locations_path = path_add();
path_set_closed(previous_locations_path, false);
path_add_point(previous_locations_path, x, y, speed);


is_lasered = false



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw particles

if (is_lasered){
  draw_laser(previous_locations_path)
  /*
  draw_sprite_pathed(spr_laser, previous_locations_path)
  
  
  var last_point = path_get_number(previous_locations_path)-1
  draw_sprite_line_shader(spr_laser, 
                    path_get_point_x(previous_locations_path, last_point), //x1
                    path_get_point_y(previous_locations_path, last_point), //y1
                    x, //x2
                    y) //y2
  
  draw_particle_line()
  */
}





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy left over paths

path_delete(previous_locations_path)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///[MOD] Cluster Shot

ds_priority_delete_value(self.step_event_queues, scr_mod_cluster)

repeat(2){ //ideally 3
//  if (irandom(2) &gt; 0){ //this helps cut down on the massive entities when 5 cluster mods are active
    var proj = instance_copy(false);
    
    //create new queues
    //proj.active_queue = ds_priority_create()
    //ds_priority_copy(proj.active_queue, active_queue);
    
    proj.weapon_event_queues = ds_priority_create()
    ds_priority_copy(proj.weapon_event_queues, self.weapon_event_queues)
    
    proj.step_event_queues = ds_priority_create()
    ds_priority_copy(proj.step_event_queues, self.step_event_queues)
    
    self.step_event_queues_temp = -1
    //the step event will fill this priority for us
    
    //variables
    proj.direction = htme_random_range(0, 360)
    
    proj.w_range = w_range*0.666
    proj.dis_traveled = 0
    proj.speed = speed*0.666
    
    proj.image_angle = proj.direction-45
    
    proj.x = x+lengthdir_x(2,proj.direction)
    proj.y = y+lengthdir_y(2,proj.direction)
    
    proj.start_x = proj.x
    proj.start_y = proj.y
    
    mod_cluster_init = false
    
    var path_number = path_get_number(previous_locations_path)-1;
    var path_xx = path_get_point_x(previous_locations_path, path_number);
    var path_yy = path_get_point_y(previous_locations_path, path_number);
    
    proj.previous_locations_path = path_add();
    path_set_closed(proj.previous_locations_path, false);
    path_add_point(proj.previous_locations_path, path_xx, path_yy, speed);
    
//  }
}

//scr_clear_modifiers()
//ds_priority_destroy(self.step_event_queues)
//instance_destroy(self.id)

// with self

var proj = self.id;
//variables
proj.direction = htme_random_range(0, 360)

proj.w_range = w_range*0.666
proj.dis_traveled = 0
proj.speed = speed*0.666

proj.image_angle = proj.direction-45

proj.x = x+lengthdir_x(2,proj.direction)
proj.y = y+lengthdir_y(2,proj.direction)

proj.start_x = proj.x
proj.start_y = proj.y

mod_cluster_init = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///store previous locations

previous_locations_step += 1

if (previous_locations_step = previous_locations_steps){
    previous_locations_step = 0
    previous_locations_i +=1
    
    previous_locations_array[previous_locations_i, 0] = x
    previous_locations_array[previous_locations_i, 1] = y
    path_add_point(previous_locations_path, x, y, speed);
    //show_debug_message("Stored new value")
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Run Modifiers

////////////////////////////////////////////////////////////////////
//Attack step event
////////////////////////////////////////////////////////////////////
if !self.collide &amp;&amp; !self.pre_collide  //if spawning projectiles
{
  //show_debug_message("proj - Attack step event")
  
  if !ds_exists(self.step_event_queues, ds_type_priority)
  {
    self.step_event_queues = ds_priority_create()
    ds_priority_copy(self.step_event_queues, ds_priority_delete_min(self.weapon_event_queues))
  }
  
  //dont delete the queue untill the collision actually happens
  //so instead we make a copy to deal with
  if !ds_exists(self.step_event_queues_temp, ds_type_priority)
  {
    self.step_event_queues_temp = ds_priority_create()
    ds_priority_copy(self.step_event_queues_temp, self.step_event_queues)
  }
  
  //check to see if there is even anything in the step queue
  if !ds_priority_empty(self.step_event_queues){
    
    while !ds_priority_empty(self.step_event_queues_temp)
    {
      scr = script_execute(ds_priority_delete_min(self.step_event_queues_temp))
    }
    
    if ds_priority_empty(self.step_event_queues_temp)
    {
      ds_priority_copy(self.step_event_queues_temp, self.step_event_queues)
    }
  }
  
  ///if we are about to collide
  dis_traveled += speed
  col_proj_ground()
  col_proj_solid()
  col_proj_enemy() //this function will not activate when colliding with an ally or a friendly summon
}


////////////////////////////////////////////////////////////////////
//Pre collision modifiers
////////////////////////////////////////////////////////////////////
if !self.collide &amp;&amp; self.pre_collide //if collision is detected, before collision is for sure
{
  //show_debug_message("proj - Pre collision modifiers")
  
  self.do_not_collide = false
  
  if !ds_exists(self.pre_col_queues, ds_type_priority)
  {
    self.pre_col_queues = ds_priority_create()
    ds_priority_copy(self.pre_col_queues, ds_priority_delete_min(self.weapon_event_queues))
  }
  //dont delete the queue untill the collision actually happens
  //so instead we make a copy to deal with
  if !ds_exists(self.pre_col_queues_temp, ds_type_priority){
    self.pre_col_queues_temp = ds_priority_create()
    ds_priority_copy(self.pre_col_queues_temp, self.pre_col_queues)
  }
  
  //cycle through all pre collision modifiers, when the modifier is finished it'll return true
  while !ds_priority_empty(self.pre_col_queues_temp){
    var scr = ds_priority_delete_min(self.pre_col_queues_temp)
    var returned = script_execute(scr)
    if (returned = true) {ds_priority_delete_value(self.pre_col_queues, scr)}
  }
  
  //refill the temp list
  if ds_priority_empty(self.pre_col_queues_temp){
    ds_priority_copy(self.pre_col_queues_temp, self.pre_col_queues)
  }
  
  
  //if pre coliisions are empty then we must have collided
  if (ds_priority_empty(self.pre_col_queues) || !do_not_collide) &amp;&amp; self.collide = false &amp;&amp; self.pre_collide = true{
    
        ////if collision is final destroy the left over queues
        if ds_exists(self.pre_col_queues_temp, ds_type_priority){
          ds_priority_destroy(self.pre_col_queues_temp)
          self.pre_col_queues_temp = -1
        }
        if ds_exists(self.pre_col_queues, ds_type_priority){
          ds_priority_destroy(self.pre_col_queues)
          self.pre_col_queues = -1
        }
        if ds_exists(self.step_event_queues_temp, ds_type_priority){
          ds_priority_destroy(self.step_event_queues_temp)
          self.step_event_queues_temp = -1
        }
        if ds_exists(self.step_event_queues, ds_type_priority){
          ds_priority_destroy(self.step_event_queues)
          self.step_event_queues = -1
        }
        ///////////////////////////////////////////////////////
        
    self.collide = true
    self.pre_collide = false
  
  }
}  
  
  
  
////////////////////////////////////////////////////////////////////
//collision modifiers
////////////////////////////////////////////////////////////////////
if self.collide &amp;&amp; !self.pre_collide  //if officially collided
{
  
    
  
  var self.result = scr_run_modifiers() //collision modifiers
  if self.result = true
  {
    
    if ds_exists(self.weapon_event_queues, ds_type_priority)
    {
      ds_priority_destroy(self.weapon_event_queues)
      self.weapon_event_queues = -1
    }
    speed = 0
    ///if aeo change sprite
    ///if aoe AND constant change sprite to rune
    ///if constant have colliders run on the player (or an object?)
    //either do your damage, or turn into an AOE effect
    self.constant_timer--
    if (self.constant_timer &lt;= 0)
    {instance_destroy()}
  }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw particles

if (is_lasered){
  draw_laser(previous_locations_path)
  /*
  draw_sprite_pathed(spr_laser, previous_locations_path)
  
  
  var last_point = path_get_number(previous_locations_path)-1
  draw_sprite_line_shader(spr_laser, 
                    path_get_point_x(previous_locations_path, last_point), //x1
                    path_get_point_y(previous_locations_path, last_point), //y1
                    x, //x2
                    y) //y2
  
  draw_particle_line()
  */
}





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw Self

draw_self()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
