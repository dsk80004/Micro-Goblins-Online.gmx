<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_camera</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///allow use of views, and set zooms

//set the ideal resolution
var ideal_h = 288;
var ideal_w = 512;
ideal_volume = ideal_h+ideal_w;
    
split_boarder = 2

hh_remainder = false

ww = 0;
hh = 0;

if !view_enabled{
  view_enabled = true;
}
    
for (var i = 0; i &lt; 8; i++)
{
  player_zoom[i] = 1
  res_scale[i] = 1
  view_visible[i] = false
  view_surface[i] = -1
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// [[[REAMOVE THIS]]]

ideal_x = 0
ideal_y = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Allow for sub pixel movement

upscale_val = 1
smooth_camera = true


if (smooth_camera){
  upscale_val = 2
  //texture_set_interpolation(true);
  surface_resize(application_surface,window_get_width()*upscale_val,window_get_height()*upscale_val)

}else{
  texture_set_interpolation(false);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init frameskip variables

max_frame_skip = 4 //10 at 60fps 3 at 20 fps
frames_skipped = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///resize the app surface

//check for resize
if (surface_get_width(application_surface) != floor(ww)) || (surface_get_height(application_surface) != floor(hh))
|| ((smooth_camera &amp;&amp; ((surface_get_width(application_surface) != floor(display_get_gui_width()*upscale_val)) || (surface_get_height(application_surface) != floor(display_get_gui_height()*upscale_val))))
|| (!smooth_camera &amp;&amp; ((surface_get_width(application_surface) != display_get_gui_width()) || (surface_get_height(application_surface) != display_get_gui_height()))))
{
  if (smooth_camera){
    ww = display_get_gui_width()*upscale_val;
    hh = display_get_gui_height()*upscale_val;
  }else{
    ww = display_get_gui_width();
    hh = display_get_gui_height();
  }
  
  surface_resize(application_surface, ww, hh)
  /*
  show_debug_message("RESIZED")
  show_debug_message("ww = "+string(ww))
  show_debug_message("surface width = "+string(surface_get_width(application_surface)))
  show_debug_message("display_get_gui_width = "+string(display_get_gui_width()))
  show_debug_message("hh = "+string(hh))
  show_debug_message("surface height = "+string(surface_get_height(application_surface)))
  show_debug_message("display_get_gui_height = "+string(display_get_gui_height()))
  */
  
  
  
  ///define number of player screens per row
  if (global.numberOfLocalPlayers = 1){
    with obj_player{
      if (htme_isLocal()){
        if (player_id_local = 0){
          view_object[0] = self
          
        }
      }
    }
    view_hspeed[0] = 0
    view_vspeed[0] = 0
    
    view_hport[0] = hh
    view_wport[0] = ww
    
    view_visible[0] = true
  }
  else
  {
    var top_split    = floor(global.numberOfLocalPlayers/2)
    var bottom_split = ceil(global.numberOfLocalPlayers/2)
    
    var view_port_height = hh/2
    
    for (var i = 0; i &lt; global.numberOfLocalPlayers; i++){
      with obj_player{
        if (htme_isLocal()){
          if (player_id_local = i){
            view_object[i] = self
          }
        }
      }
      view_hspeed[i] = 0
      view_vspeed[i] = 0
      
      //resize the width and height of each view
      
      if (i &lt; top_split)
      {
          view_wport[i] = ww/top_split
          view_xport[i] = (ww/top_split)*(i) 
          view_yport[i] = 0
          view_hport[i] = ceil(view_port_height)
      } else {
        view_wport[i] = ww/bottom_split
        view_xport[i] = (ww/bottom_split)*(i-top_split) 
        view_yport[i] = ceil(view_port_height)
        view_hport[i] = floor(view_port_height)
      }
      
      view_hborder[i] = 0
      view_vborder[i] = 0
      
      view_visible[i] = true
    }
    
    
  }
  
  
  
  
  ///resolution scaling variable set
  if (global.numberOfLocalPlayers = 1)
  {
    var v_res = hh;
    var h_res = ww;
    res_volume = v_res+h_res;
    
    res_scale[0] = res_volume/ideal_volume;
    
    view_hview[0] = view_hport[0]/(player_zoom[0]*res_scale[0])
    view_wview[0] = view_wport[0]/(player_zoom[0]*res_scale[0])
    
    view_xview[0] = view_object[0].x - view_wview[0]/2
    view_yview[0] = view_object[0].y - view_hview[0]/2
    
  }else{
    for (var i = 0; i &lt; global.numberOfLocalPlayers; i++)
    {
      var v_res = view_hport[i];
      var h_res = view_wport[i];
      res_volume = v_res+h_res;
      
      res_scale[i] = (res_volume/2)/(ideal_volume/2);
      
      view_hview[i] = view_hport[i]/(player_zoom[i]*res_scale[i])
      view_wview[i] = view_wport[i]/(player_zoom[i]*res_scale[i])
      
      view_xview[i] = view_object[i].x - view_wview[i]/2
      view_yview[i] = view_object[i].y - view_hview[i]/2
      
    }
  }
  
  
  
  
}





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// [debug] resolution 

for (var i = 0; i &lt; global.numberOfLocalPlayers; i++)
{
    
//show_debug_player(i, "res_volume = "+string(view_hport[i]+view_wport[i]))
//show_debug_player(i, "ideal_volume = "+string(ideal_volume))
//show_debug_player(i, "res_scale[i] = "+string(res_scale[i]))
//show_debug_player(i, "display_get_gui_height = "+string(display_get_gui_height()))
//show_debug_player(i, "window_get_height = "+string(window_get_height()))
//show_debug_player(i, "surface_get_height = "+string(surface_get_height(application_surface)))


}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// //define number of player screens per row

/*
if (ww != window_get_width()) || (hh != window_get_height()) || (surface_get_width(application_surface) != window_get_width()) || (surface_get_height(application_surface) != hh) || (surface_get_width(application_surface) != ww)
{
  ww = display_get_gui_width();
  hh = display_get_gui_height();
  
  if (surface_get_width(application_surface) != ww) || (surface_get_height(application_surface) != hh)
  {
    surface_resize(application_surface, ww, hh)
    show_debug_message("application_surface Dimmensions were not correct")
  }

}



if (global.numberOfLocalPlayers = 1)
{
  //application_surface_draw_enable(true);
  
  
  with obj_player
  {
    if (htme_isLocal())
    {
      if (player_id_local = 0)
      {
        view_object[0] = self
        
        view_hspeed[0] = 0 //self.hspeed
        view_vspeed[0] = 0 //self.vspeed
        
      }
    }
  }
  
  view_hport[0] = hh
  view_wport[0] = ww
  
  //show_debug_message("surface_get_height(application_surface) = "+string(surface_get_height(application_surface)))
  
  
  //zoom functions
  if (obj_controller.zoom_in_pressed[0] = true)
  {player_zoom[0] = player_zoom[0] * 2};
  if (obj_controller.zoom_out_pressed[0] = true)
  {player_zoom[0] = player_zoom[0] / 2};
  
  player_zoom[0] = clamp(player_zoom[0], 0.125, 8)
  
  view_hview[0] = hh/(player_zoom[0]*res_scale)
  view_wview[0] = ww/(player_zoom[0]*res_scale)
  
  view_hborder[0] = 0 //view_wview[0]/2
  view_vborder[0] = 0 //view_hview[0]/2
  
  view_visible[0] = true
  for (var v = 1; v &lt;= 7; v++)
  {
    view_visible[v] = false
  }
}
else
{
  //application_surface_draw_enable(true);
  
  var top_split    = floor(global.numberOfLocalPlayers/2)
  var bottom_split = ceil(global.numberOfLocalPlayers/2)
  
  var view_port_height = hh/2
  
  //if (hh mod 2) != 0  //if there is a remainder
  //{ //mark the remainder and adjust later
  //  hh_remainder = true
  //}
  
  for (var i = 0; i &lt; global.numberOfLocalPlayers; i++)
  {
    
    with obj_player
    {
      if (htme_isLocal())
      {
        if (player_id_local = i)
        {
          view_object[i] = self
          
          view_hspeed[i] = 0 //self.hspeed
          view_vspeed[i] = 0 //self.vspeed
          
        }
      }
    }
    
    //zoom functions
    if (obj_controller.zoom_in_pressed[0] = true)
    {player_zoom[i] = player_zoom[i] * 2};
    if (obj_controller.zoom_out_pressed[0] = true)
    {player_zoom[i] -= player_zoom[i] / 2};
     
    player_zoom[i] = clamp(player_zoom[i], 0.125, 8)
    
    
    
    view_visible[i] = true
    
    ///this section will be changed when the zoom function is added in///
    
    view_hview[i] = floor(view_port_height/(player_zoom[i]*res_scale)+0.5)
    if (i &lt; top_split)
    {
      view_wview[i] = floor((ww/top_split)/(player_zoom[i]*res_scale)+0.5)
    } else {
      view_wview[i] = floor((ww/bottom_split)/(player_zoom[i]*res_scale)+0.5)
    }
    
    //zoom function
    
    /////////////////////////////////////////////////////////////////////
    
    view_hport[i] = floor(view_port_height+0.5)
    if (i &lt; top_split)
    {
        view_wport[i] = floor(ww/top_split+0.5)
    } else {
      view_wport[i] = floor(ww/bottom_split+0.5)
      view_hport[i] += (hh mod 2)
    }
    
    view_hborder[i] = 0 //view_wview[i]/2
    view_vborder[i] = 0 //view_hview[i]/2
    /*
    if !surface_exists(view_surface[i])
    {
      //show_debug_message("view_surface_id["+string(i)+"] missing")
      view_surface[i] = surface_create(view_wport[i], view_hport[i])
      view_surface_id[i] = view_surface[i]
    }
    
    ///make sure the surfaces are the same size as the views
    if (view_surface_id[i]))
    {
      if (surface_get_width(view_surface_id[i]) != view_wport[i])
        {
        show_debug_message("view_surface_id not the correct size")
        surface_resize(view_surface_id[i], view_wport[i], surface_get_height(view_surface_id[i]))}
      if (surface_get_height(view_surface_id[i]) != view_hport[i])
        {
        show_debug_message("view_surface_id not the correct size")
        surface_resize(view_surface_id[i], surface_get_width(view_surface_id[i]), view_hport[i])}
        //show_debug_message("view_surface_id not the correct size")
        //show_debug_message("surface_get_width(view_surface_id["+string(i)+"]) = "+string(surface_get_width(view_surface_id[i])))
        //show_debug_message("view_wport["+string(i)+"]) = "+string(view_wport[i]))
        //show_debug_message("ww = "+string(ww))
        
        
    }
    //*/
//  }
  
  
//}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Zoom


//if any zoom button is pressed
//var zooming = false
//for (var i = 0; i &lt; global.numberOfLocalPlayers; i++){
//  if (obj_controller.zoom_out_pressed[i]){
//    var zooming = true
//  }
//}

//if zooming {

  
if (global.numberOfLocalPlayers = 1)
{
  if (obj_controller.zoom_in_pressed[0]) || (obj_controller.zoom_out_pressed[0])
  {
    if (obj_controller.zoom_in_pressed[0] = true)
      {player_zoom[0] = player_zoom[0] * 2};
    if (obj_controller.zoom_out_pressed[0] = true)
      {player_zoom[0] = player_zoom[0] / 2};
    
    //player_zoom[0] = clamp(player_zoom[0], 0.125, 8)
    if (global.debug = false){
      player_zoom[0] = clamp(player_zoom[0], 0.5, 2)
    }else{
      player_zoom[0] = clamp(player_zoom[0], 0.0078125, 32)
    }
    
    view_hview[0] = view_hport[0]/(player_zoom[0]*res_scale[0])
    view_wview[0] = view_wport[0]/(player_zoom[0]*res_scale[0])
    
    view_xview[0] = view_object[0].x - view_wview[0]/2
    view_yview[0] = view_object[0].y - view_hview[0]/2
    
    view_hborder[0] = 0 //view_wview[0]/2
    view_vborder[0] = 0 //view_hview[0]/2
  }
}
else
{
  //multiplayer zoom functions
  
  var top_split    = floor(global.numberOfLocalPlayers/2)
  var bottom_split = ceil(global.numberOfLocalPlayers/2)
  
  var view_port_height = hh/2
  
  for (var i = 0; i &lt; global.numberOfLocalPlayers; i++)
  {
    if (obj_controller.zoom_in_pressed[0] = true)
      {player_zoom[i] = player_zoom[i] * 2};
    if (obj_controller.zoom_out_pressed[0] = true)
      {player_zoom[i] -= player_zoom[i] / 2};
       
    //player_zoom[i] = clamp(player_zoom[i], 0.125, 8)
    if (global.debug = false){
      player_zoom[i] = clamp(player_zoom[i], 0.5, 2)
    }else{
      player_zoom[i] = clamp(player_zoom[i], 0.0078125, 8)
    }
    
    if (obj_controller.zoom_in_pressed[0]) || (obj_controller.zoom_out_pressed[0]){
      view_hview[i] = view_hport[i]/(player_zoom[i]*res_scale[i])
      view_wview[i] = view_wport[i]/(player_zoom[i]*res_scale[i])
      
      view_xview[i] = view_object[i].x - view_wview[i]/2
      view_yview[i] = view_object[i].y - view_hview[i]/2
    }
  }
}

//}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move views for movement

for (var i = 0; i &lt; global.numberOfLocalPlayers; i++){
  
  //view_center_x = view_xview[i]+view_wview[i]/2
  //view_center_y = view_yview[i]+view_hview[i]/2
  /*
  show_debug_message("view_current = "+string(i))
  if (i = 0){
    show_debug_message("view_center_x = "+string(view_center_x))
    show_debug_message("view_center_y = "+string(view_center_y))
  }//*/
  with view_object[i]{
    ideal_x = self.x //+ clamp(lengthdir_x((view_wview[i]*0.25)*(self.spd/2), self.dir),-(view_wview[i]*0.25),view_wview[i]*0.25)
    ideal_y = self.y //+ clamp(lengthdir_y((view_hview[i]*0.25)*(self.spd/2), self.dir),-(view_hview[i]*0.25),view_hview[i]*0.25)
    
    //draw_set_color(c_red)
    //draw_arrow(x,y,other.view_center_x,other.view_center_y,5)
    
    //draw_set_color(c_green)
    //draw_arrow(x,y,ideal_x,ideal_y,5)
    
    //final_x = other.view_center_x+dis_x
    //final_y = other.view_center_y+dis_y
    
    //draw_set_color(c_yellow)
    //draw_arrow(x,y,final_x,final_y,5)
    //draw_set_color(c_white)
    view_xview[i] = ideal_x-view_wview[i]/2
    view_yview[i] = ideal_y-view_hview[i]/2
    /*
    if (i = 0){
      view_center_x = view_xview[i]+view_wview[i]/2
      view_center_y = view_yview[i]+view_hview[i]/2
      
      show_debug_message("view_center_x = "+string(view_center_x))
      show_debug_message("view_center_y = "+string(view_center_y))
    }//*/
  }
}





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// //draw the views to the application surface
/*

if (global.numberOfLocalPlayers = 1)
{
  if view_visible[0]
    {
      view_xport[0] = 0
      view_yport[0] = 0
    }
}
else
{
  var top_split    = floor(global.numberOfLocalPlayers/2)
  var bottom_split = ceil(global.numberOfLocalPlayers/2)
  
  var view_port_height = hh/2
  
  
  
  for (var i = 0; i &lt; global.numberOfLocalPlayers; i++)
  {
    xx = view_wport[i]*i
    if (i &gt;= top_split)
    {
      if (i = top_split)
      {xx = 0}
      else
      {xx = view_wport[i]*(i-top_split) }
    }
    
    if (i &lt; top_split)
      {yy = 0}
    else
      {yy = view_port_height}
    
    
    if view_visible[i]
    {
      view_xport[i] = xx
      view_yport[i] = yy
      
      /*
      ///the following two if statements prevent weird black lines from appearing due to rounding errors with GM
      //if the screen is on the bottom row
      if (i &gt;= top_split){
        view_hport[i] += (hh mod 2)
      }else{
        view_hport[i] += 1
      }
      
      //if last one on the row
      if (i = top_split-1) || (i = global.numberOfLocalPlayers-1){
        if (i = top_split-1) view_wport[i] += (ww mod top_split);
        if (i = global.numberOfLocalPlayers-1) view_wport[i] += (ww mod bottom_split);
      }else{
        view_wport[i] += 1
      }
      */
//    }
//  }
//}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///handle frame skipping

if (lag() &gt; 2) &amp;&amp; (frames_skipped &lt; max_frame_skip){
  draw_enable_drawevent(false);
  frames_skipped++
  
}else{
  draw_enable_drawevent(true);
  frames_skipped = 0;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if smooth_camera
{
  // DISABLE ALPHABLEND BECAUSE SURFACES //
  draw_enable_alphablend(0);
  texture_set_interpolation(true);
  // GET OFFSET OF THE APPLICATION SURFACE FOR MANUAL DRAWING //
  var offset = application_get_position();
  // DRAW THE APPLICATION SURFACE //
  draw_surface_stretched(application_surface, offset[0], offset[1],ww/upscale_val,hh/upscale_val);
  //for (var i = 0; i &lt; global.numberOfLocalPlayers; i++){
  //  if (view_visible[i]) draw_surface_ext(view_surface_id[i], view_xport[i]/2, view_yport[i]/2,0.5,0.5,0,0,1);
  //}
  
  // RESET ALPHABLEND //
  draw_enable_alphablend(1);
  texture_set_interpolation(false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if smooth_camera
{
  application_surface_draw_enable(false)
}else{
  application_surface_draw_enable(true)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw screen seporators
if (global.numberOfLocalPlayers != 1)
{
  var top_split    = floor(global.numberOfLocalPlayers/2)
  //var bottom_split = ceil(global.numberOfLocalPlayers/2)
  
  var view_port_height = hh/2
  
  var line_width = 3*(1+obj_camera_control.smooth_camera)
  
  for (var i = 0; i &lt; global.numberOfLocalPlayers; i++)
  {
    draw_set_color(c_white)
    if (i != top_split) &amp;&amp; (i != 0){
      //left line
      draw_line_width(view_xport[i], view_yport[i]-1, view_xport[i], view_yport[i]+view_hport[i]+1, line_width)
    }
    if (i &lt; top_split){
      //bottom line
      draw_line_width(view_xport[i]-1, view_yport[i]+view_hport[i], view_xport[i]+view_wport[i]+1, view_yport[i]+view_hport[i], line_width)
    }
  }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///dont draw self
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
