<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_particle_controller</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>particle_map = ds_map_create()

part_sys = part_system_create()
part_system_depth(part_sys, 2);
ps_reset = true
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// /* Particle_map Example

/*
part_sys{
  part_type_string{
    id:1028401
    time:10
    emit_id:{
      emit_time:5
    }
    emit_id:{
      emit_time:10
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_system_destroy(part_sys)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///decrement the particle times


var size, i;

size = ds_map_size(particle_map);

if (size &gt; 0) || (part_particles_count(part_sys) = 0){  //make sure there is even something in the map first
  
  ps_reset = false
  
  //find the particle type
  var part_type_key = ds_map_find_first(particle_map);
  var part_type_map = particle_map[? part_type_key];
  
  /////for each particle type
  repeat(size){
    
    if (part_type_map != undefined){
      //find out how many keys are inside the particle type map
      var pt_size = ds_map_size(part_type_map);
      
      //we use 2 because we have a value to keep track of time, and the particle type's ID
      if (pt_size &gt; 2){
          
        //find the first emitter map and string
        var part_emit_key = ds_map_find_first(part_type_map);
        var part_emit_map = part_type_map[? part_emit_key];
        
        //cycle through the sub maps decrementing each of the emitter timers
        /////for each emitter
        repeat(pt_size){
            
          ///make sure the key we are focused on is actually a map, and that it's the emitter ID
          if (part_emit_map != undefined){
            if (part_emit_key != "time") &amp;&amp; (part_emit_key != "id"){
              if ds_exists(part_emit_map, ds_type_map) &amp;&amp; part_emitter_exists(part_sys, part_emit_map[? "id"]){
                
                //decrement emitter time
                part_emit_map[? "time"] -= 1//*lag()
                  
                //if emit timer is up, destroy emit
                if (part_emit_map[? "time"] &lt;= 0){
                  part_emitter_destroy(part_sys, part_emit_map[? "id"])
                  ds_map_delete(part_type_map, part_emit_key);
                  ds_map_destroy(part_emit_map)
                }
              }
            }
          }
          
          //find the next emitter map and string
          var part_emit_key = ds_map_find_next(part_type_map, part_emit_key);
          var part_emit_map = part_type_map[? part_emit_key];
        }//end for
        
      }else{ //if there is no emitters for the particle type, then we decrement the part type timer
        //decrement time
        part_type_map[? "time"] -= 1//*lag()
        
      
        //if the timer has ended delete the particles from memory
        if (part_type_map[? "time"] &lt;= 0){
          
          //make sure the particle system exists before we try to delete it
          if part_type_exists(part_type_map[? "id"]){
              //now delete it
              part_type_destroy(part_type_map[? "id"])
              ds_map_delete(particle_map, part_type_key);
              ds_map_destroy(part_type_map)
          }
        }
      }
    }
    
    var part_type_key = ds_map_find_next(particle_map, part_type_key);
    var part_type_map = particle_map[? part_type_key];
    
  }///end of part type for loop


}else{  //if the map is empty reset the particle system, (this will remove any emitter left over for some reason)
  if (ps_reset = false){
    part_system_clear(part_sys);
    part_system_depth(part_sys, -2);
    part_system_draw_order(part_sys, true);
    
    ds_map_clear(particle_map)
    
    ps_reset = true
  }
  
}

//*/



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="90">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_particle_blood(x,y)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="88">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var color = c_orange &amp; c_purple
var color = irandom(c_white)

draw_particle_aoe_circle(prt_aoe_runic, mouse_x, mouse_y, 32+(32*4), room_speed*3, color)
draw_particle_aoe_particles(prt_runes, mouse_x, mouse_y, 32+(32*4), room_speed*3, color)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
